
lab1_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046cc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004878  08004878  00014878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004898  08004898  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004898  08004898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048a0  080048a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080048a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000564  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000574  20000574  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a65  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002860  00000000  00000000  00031aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  00034308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b50  00000000  00000000  00034f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025666  00000000  00000000  00035ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001111f  00000000  00000000  0005b126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5003  00000000  00000000  0006c245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00151248  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003210  00000000  00000000  0015129c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004860 	.word	0x08004860

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08004860 	.word	0x08004860

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ea:	463b      	mov	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004f6:	4b21      	ldr	r3, [pc, #132]	; (800057c <MX_ADC1_Init+0x98>)
 80004f8:	4a21      	ldr	r2, [pc, #132]	; (8000580 <MX_ADC1_Init+0x9c>)
 80004fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004fc:	4b1f      	ldr	r3, [pc, #124]	; (800057c <MX_ADC1_Init+0x98>)
 80004fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000502:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <MX_ADC1_Init+0x98>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <MX_ADC1_Init+0x98>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000510:	4b1a      	ldr	r3, [pc, #104]	; (800057c <MX_ADC1_Init+0x98>)
 8000512:	2200      	movs	r2, #0
 8000514:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000516:	4b19      	ldr	r3, [pc, #100]	; (800057c <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <MX_ADC1_Init+0x98>)
 8000520:	2200      	movs	r2, #0
 8000522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <MX_ADC1_Init+0x98>)
 8000526:	4a17      	ldr	r2, [pc, #92]	; (8000584 <MX_ADC1_Init+0xa0>)
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_ADC1_Init+0x98>)
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <MX_ADC1_Init+0x98>)
 8000532:	2201      	movs	r2, #1
 8000534:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_ADC1_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_ADC1_Init+0x98>)
 8000540:	2201      	movs	r2, #1
 8000542:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <MX_ADC1_Init+0x98>)
 8000546:	f000 fd55 	bl	8000ff4 <HAL_ADC_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000550:	f000 fad0 	bl	8000af4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000554:	2311      	movs	r3, #17
 8000556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000558:	2301      	movs	r3, #1
 800055a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	4619      	mov	r1, r3
 8000564:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_ADC1_Init+0x98>)
 8000566:	f000 fd89 	bl	800107c <HAL_ADC_ConfigChannel>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000570:	f000 fac0 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000034 	.word	0x20000034
 8000580:	40012000 	.word	0x40012000
 8000584:	0f000001 	.word	0x0f000001

08000588 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <HAL_ADC_MspInit+0x3c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d10d      	bne.n	80005b6 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <HAL_ADC_MspInit+0x40>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a2:	4a09      	ldr	r2, [pc, #36]	; (80005c8 <HAL_ADC_MspInit+0x40>)
 80005a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a8:	6453      	str	r3, [r2, #68]	; 0x44
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <HAL_ADC_MspInit+0x40>)
 80005ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40012000 	.word	0x40012000
 80005c8:	40023800 	.word	0x40023800

080005cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_DMA_Init+0x3c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <MX_DMA_Init+0x3c>)
 80005dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_DMA_Init+0x3c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	200c      	movs	r0, #12
 80005f4:	f001 f84b 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005f8:	200c      	movs	r0, #12
 80005fa:	f001 f864 	bl	80016c6 <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800

0800060c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ETH_Init+0x78>)
 8000612:	4a1d      	ldr	r2, [pc, #116]	; (8000688 <MX_ETH_Init+0x7c>)
 8000614:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_ETH_Init+0x78>)
 8000618:	2201      	movs	r2, #1
 800061a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ETH_Init+0x78>)
 800061e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000622:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ETH_Init+0x78>)
 8000626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800062a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ETH_Init+0x78>)
 800062e:	2200      	movs	r2, #0
 8000630:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_ETH_Init+0x80>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_ETH_Init+0x80>)
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_ETH_Init+0x80>)
 8000640:	22e1      	movs	r2, #225	; 0xe1
 8000642:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_ETH_Init+0x80>)
 8000646:	2200      	movs	r2, #0
 8000648:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_ETH_Init+0x80>)
 800064c:	2200      	movs	r2, #0
 800064e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_ETH_Init+0x80>)
 8000652:	2200      	movs	r2, #0
 8000654:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_ETH_Init+0x78>)
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <MX_ETH_Init+0x80>)
 800065a:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_ETH_Init+0x78>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_ETH_Init+0x78>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_ETH_Init+0x78>)
 800066a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800066e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_ETH_Init+0x78>)
 8000672:	f001 fbbf 	bl	8001df4 <HAL_ETH_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 800067c:	f000 fa3a 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000007c 	.word	0x2000007c
 8000688:	40028000 	.word	0x40028000
 800068c:	2000002c 	.word	0x2000002c

08000690 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08e      	sub	sp, #56	; 0x38
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a55      	ldr	r2, [pc, #340]	; (8000804 <HAL_ETH_MspInit+0x174>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	f040 80a4 	bne.w	80007fc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
 80006b8:	4b53      	ldr	r3, [pc, #332]	; (8000808 <HAL_ETH_MspInit+0x178>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	4a52      	ldr	r2, [pc, #328]	; (8000808 <HAL_ETH_MspInit+0x178>)
 80006be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006c2:	6313      	str	r3, [r2, #48]	; 0x30
 80006c4:	4b50      	ldr	r3, [pc, #320]	; (8000808 <HAL_ETH_MspInit+0x178>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006cc:	623b      	str	r3, [r7, #32]
 80006ce:	6a3b      	ldr	r3, [r7, #32]
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
 80006d4:	4b4c      	ldr	r3, [pc, #304]	; (8000808 <HAL_ETH_MspInit+0x178>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	4a4b      	ldr	r2, [pc, #300]	; (8000808 <HAL_ETH_MspInit+0x178>)
 80006da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006de:	6313      	str	r3, [r2, #48]	; 0x30
 80006e0:	4b49      	ldr	r3, [pc, #292]	; (8000808 <HAL_ETH_MspInit+0x178>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006e8:	61fb      	str	r3, [r7, #28]
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	4b45      	ldr	r3, [pc, #276]	; (8000808 <HAL_ETH_MspInit+0x178>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f4:	4a44      	ldr	r2, [pc, #272]	; (8000808 <HAL_ETH_MspInit+0x178>)
 80006f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006fa:	6313      	str	r3, [r2, #48]	; 0x30
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <HAL_ETH_MspInit+0x178>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	4b3e      	ldr	r3, [pc, #248]	; (8000808 <HAL_ETH_MspInit+0x178>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000710:	4a3d      	ldr	r2, [pc, #244]	; (8000808 <HAL_ETH_MspInit+0x178>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	6313      	str	r3, [r2, #48]	; 0x30
 8000718:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <HAL_ETH_MspInit+0x178>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	4b37      	ldr	r3, [pc, #220]	; (8000808 <HAL_ETH_MspInit+0x178>)
 800072a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072c:	4a36      	ldr	r2, [pc, #216]	; (8000808 <HAL_ETH_MspInit+0x178>)
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	6313      	str	r3, [r2, #48]	; 0x30
 8000734:	4b34      	ldr	r3, [pc, #208]	; (8000808 <HAL_ETH_MspInit+0x178>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	4b30      	ldr	r3, [pc, #192]	; (8000808 <HAL_ETH_MspInit+0x178>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	4a2f      	ldr	r2, [pc, #188]	; (8000808 <HAL_ETH_MspInit+0x178>)
 800074a:	f043 0302 	orr.w	r3, r3, #2
 800074e:	6313      	str	r3, [r2, #48]	; 0x30
 8000750:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <HAL_ETH_MspInit+0x178>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b29      	ldr	r3, [pc, #164]	; (8000808 <HAL_ETH_MspInit+0x178>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	4a28      	ldr	r2, [pc, #160]	; (8000808 <HAL_ETH_MspInit+0x178>)
 8000766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076a:	6313      	str	r3, [r2, #48]	; 0x30
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <HAL_ETH_MspInit+0x178>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000778:	2332      	movs	r3, #50	; 0x32
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	2302      	movs	r3, #2
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000788:	230b      	movs	r3, #11
 800078a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000790:	4619      	mov	r1, r3
 8000792:	481e      	ldr	r0, [pc, #120]	; (800080c <HAL_ETH_MspInit+0x17c>)
 8000794:	f001 ff9a 	bl	80026cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000798:	2386      	movs	r3, #134	; 0x86
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a8:	230b      	movs	r3, #11
 80007aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b0:	4619      	mov	r1, r3
 80007b2:	4817      	ldr	r0, [pc, #92]	; (8000810 <HAL_ETH_MspInit+0x180>)
 80007b4:	f001 ff8a 	bl	80026cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c6:	2303      	movs	r3, #3
 80007c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ca:	230b      	movs	r3, #11
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	480f      	ldr	r0, [pc, #60]	; (8000814 <HAL_ETH_MspInit+0x184>)
 80007d6:	f001 ff79 	bl	80026cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ec:	230b      	movs	r3, #11
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f4:	4619      	mov	r1, r3
 80007f6:	4808      	ldr	r0, [pc, #32]	; (8000818 <HAL_ETH_MspInit+0x188>)
 80007f8:	f001 ff68 	bl	80026cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007fc:	bf00      	nop
 80007fe:	3738      	adds	r7, #56	; 0x38
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40028000 	.word	0x40028000
 8000808:	40023800 	.word	0x40023800
 800080c:	40020800 	.word	0x40020800
 8000810:	40020000 	.word	0x40020000
 8000814:	40020400 	.word	0x40020400
 8000818:	40021800 	.word	0x40021800

0800081c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
 8000836:	4b4c      	ldr	r3, [pc, #304]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a4b      	ldr	r2, [pc, #300]	; (8000968 <MX_GPIO_Init+0x14c>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b49      	ldr	r3, [pc, #292]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	4b45      	ldr	r3, [pc, #276]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a44      	ldr	r2, [pc, #272]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b42      	ldr	r3, [pc, #264]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b3e      	ldr	r3, [pc, #248]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a3d      	ldr	r2, [pc, #244]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b37      	ldr	r3, [pc, #220]	; (8000968 <MX_GPIO_Init+0x14c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a36      	ldr	r2, [pc, #216]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b34      	ldr	r3, [pc, #208]	; (8000968 <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b30      	ldr	r3, [pc, #192]	; (8000968 <MX_GPIO_Init+0x14c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <MX_GPIO_Init+0x14c>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_GPIO_Init+0x14c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a28      	ldr	r2, [pc, #160]	; (8000968 <MX_GPIO_Init+0x14c>)
 80008c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f244 0181 	movw	r1, #16513	; 0x4081
 80008e0:	4822      	ldr	r0, [pc, #136]	; (800096c <MX_GPIO_Init+0x150>)
 80008e2:	f002 f89f 	bl	8002a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2140      	movs	r1, #64	; 0x40
 80008ea:	4821      	ldr	r0, [pc, #132]	; (8000970 <MX_GPIO_Init+0x154>)
 80008ec:	f002 f89a 	bl	8002a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	481b      	ldr	r0, [pc, #108]	; (8000974 <MX_GPIO_Init+0x158>)
 8000908:	f001 fee0 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800090c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4811      	ldr	r0, [pc, #68]	; (800096c <MX_GPIO_Init+0x150>)
 8000926:	f001 fed1 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800092a:	2340      	movs	r3, #64	; 0x40
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <MX_GPIO_Init+0x154>)
 8000942:	f001 fec3 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_GPIO_Init+0x154>)
 800095a:	f001 feb7 	bl	80026cc <HAL_GPIO_Init>

}
 800095e:	bf00      	nop
 8000960:	3730      	adds	r7, #48	; 0x30
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40020400 	.word	0x40020400
 8000970:	40021800 	.word	0x40021800
 8000974:	40020800 	.word	0x40020800

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097c:	f000 faa4 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f84e 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f7ff ff4a 	bl	800081c <MX_GPIO_Init>
  MX_ETH_Init();
 8000988:	f7ff fe40 	bl	800060c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800098c:	f000 f93c 	bl	8000c08 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000990:	f7ff fe1c 	bl	80005cc <MX_DMA_Init>
  MX_ADC1_Init();
 8000994:	f7ff fda6 	bl	80004e4 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000998:	f000 f9e4 	bl	8000d64 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flashing)
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <main+0xa0>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d0fb      	beq.n	800099c <main+0x24>
	  {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	481c      	ldr	r0, [pc, #112]	; (8000a1c <main+0xa4>)
 80009aa:	f002 f83b 	bl	8002a24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b4:	4819      	ldr	r0, [pc, #100]	; (8000a1c <main+0xa4>)
 80009b6:	f002 f835 	bl	8002a24 <HAL_GPIO_WritePin>
			HAL_Delay(250);
 80009ba:	20fa      	movs	r0, #250	; 0xfa
 80009bc:	f000 faf6 	bl	8000fac <HAL_Delay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2180      	movs	r1, #128	; 0x80
 80009c4:	4815      	ldr	r0, [pc, #84]	; (8000a1c <main+0xa4>)
 80009c6:	f002 f82d 	bl	8002a24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d0:	4812      	ldr	r0, [pc, #72]	; (8000a1c <main+0xa4>)
 80009d2:	f002 f827 	bl	8002a24 <HAL_GPIO_WritePin>
			HAL_Delay(250);
 80009d6:	20fa      	movs	r0, #250	; 0xfa
 80009d8:	f000 fae8 	bl	8000fac <HAL_Delay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	480e      	ldr	r0, [pc, #56]	; (8000a1c <main+0xa4>)
 80009e2:	f002 f81f 	bl	8002a24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ec:	480b      	ldr	r0, [pc, #44]	; (8000a1c <main+0xa4>)
 80009ee:	f002 f819 	bl	8002a24 <HAL_GPIO_WritePin>
			HAL_Delay(250);
 80009f2:	20fa      	movs	r0, #250	; 0xfa
 80009f4:	f000 fada 	bl	8000fac <HAL_Delay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2180      	movs	r1, #128	; 0x80
 80009fc:	4807      	ldr	r0, [pc, #28]	; (8000a1c <main+0xa4>)
 80009fe:	f002 f811 	bl	8002a24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <main+0xa4>)
 8000a0a:	f002 f80b 	bl	8002a24 <HAL_GPIO_WritePin>
			HAL_Delay(250);
 8000a0e:	20fa      	movs	r0, #250	; 0xfa
 8000a10:	f000 facc 	bl	8000fac <HAL_Delay>
	  if (flashing)
 8000a14:	e7c2      	b.n	800099c <main+0x24>
 8000a16:	bf00      	nop
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	40020400 	.word	0x40020400

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b094      	sub	sp, #80	; 0x50
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0320 	add.w	r3, r7, #32
 8000a2a:	2230      	movs	r2, #48	; 0x30
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 ff0e 	bl	8004850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <SystemClock_Config+0xcc>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a27      	ldr	r2, [pc, #156]	; (8000aec <SystemClock_Config+0xcc>)
 8000a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <SystemClock_Config+0xcc>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a80:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a86:	2302      	movs	r3, #2
 8000a88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a90:	2304      	movs	r3, #4
 8000a92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a94:	23a8      	movs	r3, #168	; 0xa8
 8000a96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa0:	f107 0320 	add.w	r3, r7, #32
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 f8f3 	bl	8002c90 <HAL_RCC_OscConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ab0:	f000 f820 	bl	8000af4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ac0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ac4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2105      	movs	r1, #5
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 fb54 	bl	8003180 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ade:	f000 f809 	bl	8000af4 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3750      	adds	r7, #80	; 0x50
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40007000 	.word	0x40007000

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	e7fe      	b.n	8000afc <Error_Handler+0x8>
	...

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f9e6 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <DMA1_Stream1_IRQHandler+0x10>)
 8000baa:	f000 fee7 	bl	800197c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000c4 	.word	0x200000c4

08000bb8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	flashing = !flashing;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <USART3_IRQHandler+0x24>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	bf0c      	ite	eq
 8000bc4:	2301      	moveq	r3, #1
 8000bc6:	2300      	movne	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <USART3_IRQHandler+0x24>)
 8000bce:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <USART3_IRQHandler+0x28>)
 8000bd2:	f002 fd1f 	bl	8003614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000124 	.word	0x20000124

08000be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <MX_USART3_UART_Init+0x50>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USART3_UART_Init+0x4c>)
 8000c40:	f002 fc9a 	bl	8003578 <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c4a:	f7ff ff53 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000124 	.word	0x20000124
 8000c58:	40004800 	.word	0x40004800

08000c5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a35      	ldr	r2, [pc, #212]	; (8000d50 <HAL_UART_MspInit+0xf4>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d163      	bne.n	8000d46 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <HAL_UART_MspInit+0xf8>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a33      	ldr	r2, [pc, #204]	; (8000d54 <HAL_UART_MspInit+0xf8>)
 8000c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <HAL_UART_MspInit+0xf8>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <HAL_UART_MspInit+0xf8>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a2c      	ldr	r2, [pc, #176]	; (8000d54 <HAL_UART_MspInit+0xf8>)
 8000ca4:	f043 0308 	orr.w	r3, r3, #8
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <HAL_UART_MspInit+0xf8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cc8:	2307      	movs	r3, #7
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4821      	ldr	r0, [pc, #132]	; (8000d58 <HAL_UART_MspInit+0xfc>)
 8000cd4:	f001 fcfa 	bl	80026cc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000cd8:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <HAL_UART_MspInit+0x100>)
 8000cda:	4a21      	ldr	r2, [pc, #132]	; (8000d60 <HAL_UART_MspInit+0x104>)
 8000cdc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <HAL_UART_MspInit+0x100>)
 8000ce0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ce4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <HAL_UART_MspInit+0x100>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_UART_MspInit+0x100>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <HAL_UART_MspInit+0x100>)
 8000cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cf8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_UART_MspInit+0x100>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <HAL_UART_MspInit+0x100>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_UART_MspInit+0x100>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <HAL_UART_MspInit+0x100>)
 8000d0e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d12:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_UART_MspInit+0x100>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000d1a:	4810      	ldr	r0, [pc, #64]	; (8000d5c <HAL_UART_MspInit+0x100>)
 8000d1c:	f000 fcee 	bl	80016fc <HAL_DMA_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000d26:	f7ff fee5 	bl	8000af4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <HAL_UART_MspInit+0x100>)
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_UART_MspInit+0x100>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2027      	movs	r0, #39	; 0x27
 8000d3c:	f000 fca7 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d40:	2027      	movs	r0, #39	; 0x27
 8000d42:	f000 fcc0 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	; 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40004800 	.word	0x40004800
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020c00 	.word	0x40020c00
 8000d5c:	200000c4 	.word	0x200000c4
 8000d60:	40026028 	.word	0x40026028

08000d64 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d72:	2204      	movs	r2, #4
 8000d74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d78:	2202      	movs	r2, #2
 8000d7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da8:	f001 fe55 	bl	8002a56 <HAL_PCD_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000db2:	f7ff fe9f 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000168 	.word	0x20000168

08000dc0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de0:	d13f      	bne.n	8000e62 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dfe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e10:	230a      	movs	r3, #10
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4815      	ldr	r0, [pc, #84]	; (8000e70 <HAL_PCD_MspInit+0xb0>)
 8000e1c:	f001 fc56 	bl	80026cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	480e      	ldr	r0, [pc, #56]	; (8000e70 <HAL_PCD_MspInit+0xb0>)
 8000e36:	f001 fc49 	bl	80026cc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e44:	6353      	str	r3, [r2, #52]	; 0x34
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_PCD_MspInit+0xac>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e90:	4c0b      	ldr	r4, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff fea1 	bl	8000be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f003 fcb1 	bl	8004808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fd67 	bl	8000978 <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000eac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000eb8:	080048a8 	.word	0x080048a8
  ldr r2, =_sbss
 8000ebc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ec0:	20000574 	.word	0x20000574

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 fbc1 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fe00 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fbd9 	bl	80016e2 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f000 fba1 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000004 	.word	0x20000004
 8000f64:	2000000c 	.word	0x2000000c
 8000f68:	20000008 	.word	0x20000008

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000000c 	.word	0x2000000c
 8000f90:	20000570 	.word	0x20000570

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000570 	.word	0x20000570

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000000c 	.word	0x2000000c

08000ff4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e033      	b.n	8001072 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	2b00      	cmp	r3, #0
 8001010:	d109      	bne.n	8001026 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fab8 	bl	8000588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f003 0310 	and.w	r3, r3, #16
 800102e:	2b00      	cmp	r3, #0
 8001030:	d118      	bne.n	8001064 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800103a:	f023 0302 	bic.w	r3, r3, #2
 800103e:	f043 0202 	orr.w	r2, r3, #2
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f94a 	bl	80012e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f023 0303 	bic.w	r3, r3, #3
 800105a:	f043 0201 	orr.w	r2, r3, #1
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
 8001062:	e001      	b.n	8001068 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001090:	2b01      	cmp	r3, #1
 8001092:	d101      	bne.n	8001098 <HAL_ADC_ConfigChannel+0x1c>
 8001094:	2302      	movs	r3, #2
 8001096:	e113      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x244>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b09      	cmp	r3, #9
 80010a6:	d925      	bls.n	80010f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68d9      	ldr	r1, [r3, #12]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	3b1e      	subs	r3, #30
 80010be:	2207      	movs	r2, #7
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43da      	mvns	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	400a      	ands	r2, r1
 80010cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68d9      	ldr	r1, [r3, #12]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	4603      	mov	r3, r0
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4403      	add	r3, r0
 80010e6:	3b1e      	subs	r3, #30
 80010e8:	409a      	lsls	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	e022      	b.n	800113a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6919      	ldr	r1, [r3, #16]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	2207      	movs	r2, #7
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	400a      	ands	r2, r1
 8001116:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6919      	ldr	r1, [r3, #16]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	4618      	mov	r0, r3
 800112a:	4603      	mov	r3, r0
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4403      	add	r3, r0
 8001130:	409a      	lsls	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b06      	cmp	r3, #6
 8001140:	d824      	bhi.n	800118c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	3b05      	subs	r3, #5
 8001154:	221f      	movs	r2, #31
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	400a      	ands	r2, r1
 8001162:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	3b05      	subs	r3, #5
 800117e:	fa00 f203 	lsl.w	r2, r0, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	430a      	orrs	r2, r1
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
 800118a:	e04c      	b.n	8001226 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b0c      	cmp	r3, #12
 8001192:	d824      	bhi.n	80011de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	3b23      	subs	r3, #35	; 0x23
 80011a6:	221f      	movs	r2, #31
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43da      	mvns	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	400a      	ands	r2, r1
 80011b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	3b23      	subs	r3, #35	; 0x23
 80011d0:	fa00 f203 	lsl.w	r2, r0, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	430a      	orrs	r2, r1
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
 80011dc:	e023      	b.n	8001226 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	3b41      	subs	r3, #65	; 0x41
 80011f0:	221f      	movs	r2, #31
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	400a      	ands	r2, r1
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	4618      	mov	r0, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	3b41      	subs	r3, #65	; 0x41
 800121a:	fa00 f203 	lsl.w	r2, r0, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <HAL_ADC_ConfigChannel+0x250>)
 8001228:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <HAL_ADC_ConfigChannel+0x254>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d10f      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x1d8>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b12      	cmp	r3, #18
 800123a:	d10b      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_ADC_ConfigChannel+0x254>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d12b      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x23a>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <HAL_ADC_ConfigChannel+0x258>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d003      	beq.n	8001270 <HAL_ADC_ConfigChannel+0x1f4>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b11      	cmp	r3, #17
 800126e:	d122      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <HAL_ADC_ConfigChannel+0x258>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d111      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_ADC_ConfigChannel+0x25c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a11      	ldr	r2, [pc, #68]	; (80012dc <HAL_ADC_ConfigChannel+0x260>)
 8001298:	fba2 2303 	umull	r2, r3, r2, r3
 800129c:	0c9a      	lsrs	r2, r3, #18
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012a8:	e002      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f9      	bne.n	80012aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40012300 	.word	0x40012300
 80012d0:	40012000 	.word	0x40012000
 80012d4:	10000012 	.word	0x10000012
 80012d8:	20000004 	.word	0x20000004
 80012dc:	431bde83 	.word	0x431bde83

080012e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012e8:	4b79      	ldr	r3, [pc, #484]	; (80014d0 <ADC_Init+0x1f0>)
 80012ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	431a      	orrs	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001314:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6859      	ldr	r1, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	021a      	lsls	r2, r3, #8
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001338:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6859      	ldr	r1, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800135a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6899      	ldr	r1, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	4a58      	ldr	r2, [pc, #352]	; (80014d4 <ADC_Init+0x1f4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d022      	beq.n	80013be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001386:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6899      	ldr	r1, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6899      	ldr	r1, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	e00f      	b.n	80013de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0202 	bic.w	r2, r2, #2
 80013ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6899      	ldr	r1, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7e1b      	ldrb	r3, [r3, #24]
 80013f8:	005a      	lsls	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d01b      	beq.n	8001444 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800141a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800142a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6859      	ldr	r1, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	3b01      	subs	r3, #1
 8001438:	035a      	lsls	r2, r3, #13
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	e007      	b.n	8001454 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001452:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	3b01      	subs	r3, #1
 8001470:	051a      	lsls	r2, r3, #20
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6899      	ldr	r1, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001496:	025a      	lsls	r2, r3, #9
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6899      	ldr	r1, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	029a      	lsls	r2, r3, #10
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	609a      	str	r2, [r3, #8]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40012300 	.word	0x40012300
 80014d4:	0f000001 	.word	0x0f000001

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	; (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff29 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff3e 	bl	8001520 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff8e 	bl	80015cc <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5d 	bl	8001578 <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff31 	bl	800153c <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa2 	bl	8001634 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff fc44 	bl	8000f94 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e099      	b.n	800184c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001738:	e00f      	b.n	800175a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800173a:	f7ff fc2b 	bl	8000f94 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b05      	cmp	r3, #5
 8001746:	d908      	bls.n	800175a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2220      	movs	r2, #32
 800174c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2203      	movs	r2, #3
 8001752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e078      	b.n	800184c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1e8      	bne.n	800173a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	4b38      	ldr	r3, [pc, #224]	; (8001854 <HAL_DMA_Init+0x158>)
 8001774:	4013      	ands	r3, r2
 8001776:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001786:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d107      	bne.n	80017c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	4313      	orrs	r3, r2
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f023 0307 	bic.w	r3, r3, #7
 80017da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d117      	bne.n	800181e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00e      	beq.n	800181e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 fa7b 	bl	8001cfc <DMA_CheckFifoParam>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2240      	movs	r2, #64	; 0x40
 8001810:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800181a:	2301      	movs	r3, #1
 800181c:	e016      	b.n	800184c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fa32 	bl	8001c90 <DMA_CalcBaseAndBitshift>
 800182c:	4603      	mov	r3, r0
 800182e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001834:	223f      	movs	r2, #63	; 0x3f
 8001836:	409a      	lsls	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	f010803f 	.word	0xf010803f

08001858 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001864:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001866:	f7ff fb95 	bl	8000f94 <HAL_GetTick>
 800186a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d008      	beq.n	800188a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e052      	b.n	8001930 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0216 	bic.w	r2, r2, #22
 8001898:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d103      	bne.n	80018ba <HAL_DMA_Abort+0x62>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d007      	beq.n	80018ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0208 	bic.w	r2, r2, #8
 80018c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0201 	bic.w	r2, r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018da:	e013      	b.n	8001904 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018dc:	f7ff fb5a 	bl	8000f94 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d90c      	bls.n	8001904 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2220      	movs	r2, #32
 80018ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2203      	movs	r2, #3
 80018f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e015      	b.n	8001930 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1e4      	bne.n	80018dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001916:	223f      	movs	r2, #63	; 0x3f
 8001918:	409a      	lsls	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d004      	beq.n	8001956 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2280      	movs	r2, #128	; 0x80
 8001950:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e00c      	b.n	8001970 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2205      	movs	r2, #5
 800195a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0201 	bic.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001988:	4b92      	ldr	r3, [pc, #584]	; (8001bd4 <HAL_DMA_IRQHandler+0x258>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a92      	ldr	r2, [pc, #584]	; (8001bd8 <HAL_DMA_IRQHandler+0x25c>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	0a9b      	lsrs	r3, r3, #10
 8001994:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a6:	2208      	movs	r2, #8
 80019a8:	409a      	lsls	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d01a      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0204 	bic.w	r2, r2, #4
 80019ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	2208      	movs	r2, #8
 80019d6:	409a      	lsls	r2, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e0:	f043 0201 	orr.w	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	2201      	movs	r2, #1
 80019ee:	409a      	lsls	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d012      	beq.n	8001a1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00b      	beq.n	8001a1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a16:	f043 0202 	orr.w	r2, r3, #2
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a22:	2204      	movs	r2, #4
 8001a24:	409a      	lsls	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d012      	beq.n	8001a54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00b      	beq.n	8001a54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	2204      	movs	r2, #4
 8001a42:	409a      	lsls	r2, r3
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4c:	f043 0204 	orr.w	r2, r3, #4
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	2210      	movs	r2, #16
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d043      	beq.n	8001aec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d03c      	beq.n	8001aec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a76:	2210      	movs	r2, #16
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d018      	beq.n	8001abe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d108      	bne.n	8001aac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d024      	beq.n	8001aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
 8001aaa:	e01f      	b.n	8001aec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d01b      	beq.n	8001aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
 8001abc:	e016      	b.n	8001aec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d107      	bne.n	8001adc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0208 	bic.w	r2, r2, #8
 8001ada:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af0:	2220      	movs	r2, #32
 8001af2:	409a      	lsls	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 808e 	beq.w	8001c1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 8086 	beq.w	8001c1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	2220      	movs	r2, #32
 8001b14:	409a      	lsls	r2, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d136      	bne.n	8001b94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0216 	bic.w	r2, r2, #22
 8001b34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d103      	bne.n	8001b56 <HAL_DMA_IRQHandler+0x1da>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0208 	bic.w	r2, r2, #8
 8001b64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6a:	223f      	movs	r2, #63	; 0x3f
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d07d      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	4798      	blx	r3
        }
        return;
 8001b92:	e078      	b.n	8001c86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d01c      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d108      	bne.n	8001bc2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d030      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	4798      	blx	r3
 8001bc0:	e02b      	b.n	8001c1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d027      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	4798      	blx	r3
 8001bd2:	e022      	b.n	8001c1a <HAL_DMA_IRQHandler+0x29e>
 8001bd4:	20000004 	.word	0x20000004
 8001bd8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10f      	bne.n	8001c0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0210 	bic.w	r2, r2, #16
 8001bf8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d032      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d022      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2205      	movs	r2, #5
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d307      	bcc.n	8001c62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f2      	bne.n	8001c46 <HAL_DMA_IRQHandler+0x2ca>
 8001c60:	e000      	b.n	8001c64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c62:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
 8001c84:	e000      	b.n	8001c88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c86:	bf00      	nop
    }
  }
}
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop

08001c90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	3b10      	subs	r3, #16
 8001ca0:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <DMA_CalcBaseAndBitshift+0x64>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	091b      	lsrs	r3, r3, #4
 8001ca8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001caa:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d909      	bls.n	8001cd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cc6:	f023 0303 	bic.w	r3, r3, #3
 8001cca:	1d1a      	adds	r2, r3, #4
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	659a      	str	r2, [r3, #88]	; 0x58
 8001cd0:	e007      	b.n	8001ce2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cda:	f023 0303 	bic.w	r3, r3, #3
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	aaaaaaab 	.word	0xaaaaaaab
 8001cf8:	08004890 	.word	0x08004890

08001cfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d11f      	bne.n	8001d56 <DMA_CheckFifoParam+0x5a>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d856      	bhi.n	8001dca <DMA_CheckFifoParam+0xce>
 8001d1c:	a201      	add	r2, pc, #4	; (adr r2, 8001d24 <DMA_CheckFifoParam+0x28>)
 8001d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d22:	bf00      	nop
 8001d24:	08001d35 	.word	0x08001d35
 8001d28:	08001d47 	.word	0x08001d47
 8001d2c:	08001d35 	.word	0x08001d35
 8001d30:	08001dcb 	.word	0x08001dcb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d046      	beq.n	8001dce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d44:	e043      	b.n	8001dce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d4e:	d140      	bne.n	8001dd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d54:	e03d      	b.n	8001dd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d5e:	d121      	bne.n	8001da4 <DMA_CheckFifoParam+0xa8>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d837      	bhi.n	8001dd6 <DMA_CheckFifoParam+0xda>
 8001d66:	a201      	add	r2, pc, #4	; (adr r2, 8001d6c <DMA_CheckFifoParam+0x70>)
 8001d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6c:	08001d7d 	.word	0x08001d7d
 8001d70:	08001d83 	.word	0x08001d83
 8001d74:	08001d7d 	.word	0x08001d7d
 8001d78:	08001d95 	.word	0x08001d95
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d80:	e030      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d025      	beq.n	8001dda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d92:	e022      	b.n	8001dda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d9c:	d11f      	bne.n	8001dde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001da2:	e01c      	b.n	8001dde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d903      	bls.n	8001db2 <DMA_CheckFifoParam+0xb6>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d003      	beq.n	8001db8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001db0:	e018      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
      break;
 8001db6:	e015      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00e      	beq.n	8001de2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc8:	e00b      	b.n	8001de2 <DMA_CheckFifoParam+0xe6>
      break;
 8001dca:	bf00      	nop
 8001dcc:	e00a      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dce:	bf00      	nop
 8001dd0:	e008      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dd2:	bf00      	nop
 8001dd4:	e006      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dd6:	bf00      	nop
 8001dd8:	e004      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dda:	bf00      	nop
 8001ddc:	e002      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dde:	bf00      	nop
 8001de0:	e000      	b.n	8001de4 <DMA_CheckFifoParam+0xe8>
      break;
 8001de2:	bf00      	nop
    }
  } 
  
  return status; 
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop

08001df4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001e04:	4baa      	ldr	r3, [pc, #680]	; (80020b0 <HAL_ETH_Init+0x2bc>)
 8001e06:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e183      	b.n	8002122 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe fc2e 	bl	8000690 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	4b9e      	ldr	r3, [pc, #632]	; (80020b4 <HAL_ETH_Init+0x2c0>)
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	4a9d      	ldr	r2, [pc, #628]	; (80020b4 <HAL_ETH_Init+0x2c0>)
 8001e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e42:	6453      	str	r3, [r2, #68]	; 0x44
 8001e44:	4b9b      	ldr	r3, [pc, #620]	; (80020b4 <HAL_ETH_Init+0x2c0>)
 8001e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001e50:	4b99      	ldr	r3, [pc, #612]	; (80020b8 <HAL_ETH_Init+0x2c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	4a98      	ldr	r2, [pc, #608]	; (80020b8 <HAL_ETH_Init+0x2c4>)
 8001e56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e5a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e5c:	4b96      	ldr	r3, [pc, #600]	; (80020b8 <HAL_ETH_Init+0x2c4>)
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4994      	ldr	r1, [pc, #592]	; (80020b8 <HAL_ETH_Init+0x2c4>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0201 	orr.w	r2, r2, #1
 8001e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e80:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e82:	f7ff f887 	bl	8000f94 <HAL_GetTick>
 8001e86:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e88:	e011      	b.n	8001eae <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001e8a:	f7ff f883 	bl	8000f94 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e98:	d909      	bls.n	8001eae <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e139      	b.n	8002122 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1e4      	bne.n	8001e8a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f023 031c 	bic.w	r3, r3, #28
 8001ece:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ed0:	f001 fb1e 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8001ed4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4a78      	ldr	r2, [pc, #480]	; (80020bc <HAL_ETH_Init+0x2c8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d908      	bls.n	8001ef0 <HAL_ETH_Init+0xfc>
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4a77      	ldr	r2, [pc, #476]	; (80020c0 <HAL_ETH_Init+0x2cc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d804      	bhi.n	8001ef0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e027      	b.n	8001f40 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	4a73      	ldr	r2, [pc, #460]	; (80020c0 <HAL_ETH_Init+0x2cc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d908      	bls.n	8001f0a <HAL_ETH_Init+0x116>
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	4a6d      	ldr	r2, [pc, #436]	; (80020b0 <HAL_ETH_Init+0x2bc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d204      	bcs.n	8001f0a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f043 030c 	orr.w	r3, r3, #12
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	e01a      	b.n	8001f40 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4a68      	ldr	r2, [pc, #416]	; (80020b0 <HAL_ETH_Init+0x2bc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d303      	bcc.n	8001f1a <HAL_ETH_Init+0x126>
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4a6b      	ldr	r2, [pc, #428]	; (80020c4 <HAL_ETH_Init+0x2d0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d911      	bls.n	8001f3e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_ETH_Init+0x2d0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d908      	bls.n	8001f34 <HAL_ETH_Init+0x140>
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4a68      	ldr	r2, [pc, #416]	; (80020c8 <HAL_ETH_Init+0x2d4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d804      	bhi.n	8001f34 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f043 0304 	orr.w	r3, r3, #4
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	e005      	b.n	8001f40 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f043 0310 	orr.w	r3, r3, #16
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	e000      	b.n	8001f40 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001f3e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001f48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f954 	bl	80021fc <HAL_ETH_WritePHYRegister>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00b      	beq.n	8001f72 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001f5e:	6939      	ldr	r1, [r7, #16]
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f9b1 	bl	80022c8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0d7      	b.n	8002122 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001f72:	20ff      	movs	r0, #255	; 0xff
 8001f74:	f7ff f81a 	bl	8000fac <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 80a5 	beq.w	80020cc <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f82:	f7ff f807 	bl	8000f94 <HAL_GetTick>
 8001f86:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f8cb 	bl	800212c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001f96:	f7fe fffd 	bl	8000f94 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d90f      	bls.n	8001fc8 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001fac:	6939      	ldr	r1, [r7, #16]
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f98a 	bl	80022c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e0ac      	b.n	8002122 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0da      	beq.n	8001f88 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f90f 	bl	80021fc <HAL_ETH_WritePHYRegister>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fe8:	6939      	ldr	r1, [r7, #16]
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f96c 	bl	80022c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e092      	b.n	8002122 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ffc:	f7fe ffca 	bl	8000f94 <HAL_GetTick>
 8002000:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	461a      	mov	r2, r3
 8002008:	2101      	movs	r1, #1
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f88e 	bl	800212c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002010:	f7fe ffc0 	bl	8000f94 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d90f      	bls.n	8002042 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002026:	6939      	ldr	r1, [r7, #16]
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f94d 	bl	80022c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e06f      	b.n	8002122 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0da      	beq.n	8002002 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	461a      	mov	r2, r3
 8002052:	2110      	movs	r1, #16
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f869 	bl	800212c <HAL_ETH_ReadPHYRegister>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00b      	beq.n	8002078 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002064:	6939      	ldr	r1, [r7, #16]
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f92e 	bl	80022c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002074:	2301      	movs	r3, #1
 8002076:	e054      	b.n	8002122 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	d004      	beq.n	800208c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	e002      	b.n	8002092 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	e035      	b.n	8002110 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	e030      	b.n	8002110 <HAL_ETH_Init+0x31c>
 80020ae:	bf00      	nop
 80020b0:	03938700 	.word	0x03938700
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40013800 	.word	0x40013800
 80020bc:	01312cff 	.word	0x01312cff
 80020c0:	02160ebf 	.word	0x02160ebf
 80020c4:	05f5e0ff 	.word	0x05f5e0ff
 80020c8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	08db      	lsrs	r3, r3, #3
 80020d2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	085b      	lsrs	r3, r3, #1
 80020da:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80020dc:	4313      	orrs	r3, r2
 80020de:	b29b      	uxth	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	2100      	movs	r1, #0
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f889 	bl	80021fc <HAL_ETH_WritePHYRegister>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00b      	beq.n	8002108 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020f4:	6939      	ldr	r1, [r7, #16]
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8e6 	bl	80022c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e00c      	b.n	8002122 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002108:	f640 70ff 	movw	r0, #4095	; 0xfff
 800210c:	f7fe ff4e 	bl	8000fac <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002110:	6939      	ldr	r1, [r7, #16]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f8d8 	bl	80022c8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3720      	adds	r7, #32
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop

0800212c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	460b      	mov	r3, r1
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b82      	cmp	r3, #130	; 0x82
 800214c:	d101      	bne.n	8002152 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800214e:	2302      	movs	r3, #2
 8002150:	e050      	b.n	80021f4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2282      	movs	r2, #130	; 0x82
 8002156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 031c 	and.w	r3, r3, #28
 8002168:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8a1b      	ldrh	r3, [r3, #16]
 800216e:	02db      	lsls	r3, r3, #11
 8002170:	b29b      	uxth	r3, r3
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002178:	897b      	ldrh	r3, [r7, #10]
 800217a:	019b      	lsls	r3, r3, #6
 800217c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	4313      	orrs	r3, r2
 8002184:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f023 0302 	bic.w	r3, r3, #2
 800218c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800219e:	f7fe fef9 	bl	8000f94 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021a4:	e015      	b.n	80021d2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80021a6:	f7fe fef5 	bl	8000f94 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b4:	d309      	bcc.n	80021ca <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e014      	b.n	80021f4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e4      	bne.n	80021a6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	460b      	mov	r3, r1
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b42      	cmp	r3, #66	; 0x42
 800221c:	d101      	bne.n	8002222 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800221e:	2302      	movs	r3, #2
 8002220:	e04e      	b.n	80022c0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2242      	movs	r2, #66	; 0x42
 8002226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 031c 	and.w	r3, r3, #28
 8002238:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8a1b      	ldrh	r3, [r3, #16]
 800223e:	02db      	lsls	r3, r3, #11
 8002240:	b29b      	uxth	r3, r3
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002248:	897b      	ldrh	r3, [r7, #10]
 800224a:	019b      	lsls	r3, r3, #6
 800224c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4313      	orrs	r3, r2
 8002254:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002278:	f7fe fe8c 	bl	8000f94 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800227e:	e015      	b.n	80022ac <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002280:	f7fe fe88 	bl	8000f94 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228e:	d309      	bcc.n	80022a4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e00d      	b.n	80022c0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1e4      	bne.n	8002280 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b0b0      	sub	sp, #192	; 0xc0
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022e4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80022f6:	2300      	movs	r3, #0
 80022f8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d103      	bne.n	8002316 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800230e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002312:	663b      	str	r3, [r7, #96]	; 0x60
 8002314:	e001      	b.n	800231a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800231a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002324:	2300      	movs	r3, #0
 8002326:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002334:	2340      	movs	r3, #64	; 0x40
 8002336:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800233e:	2300      	movs	r3, #0
 8002340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800235c:	2300      	movs	r3, #0
 800235e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002362:	2300      	movs	r3, #0
 8002364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800236e:	2300      	movs	r3, #0
 8002370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002374:	2300      	movs	r3, #0
 8002376:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002386:	2300      	movs	r3, #0
 8002388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800239c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023a0:	4bac      	ldr	r3, [pc, #688]	; (8002654 <ETH_MACDMAConfig+0x38c>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80023a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80023aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80023ac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80023ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80023b0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80023b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80023b4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80023ba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80023bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80023be:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80023c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80023c2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80023c8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80023ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80023cc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80023ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80023d0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80023d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80023d4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80023d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80023d8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80023da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80023dc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80023de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023fc:	2001      	movs	r0, #1
 80023fe:	f7fe fdd5 	bl	8000fac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800240a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800240c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800240e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002410:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002412:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002414:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002416:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800241a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800241c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002420:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002422:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002426:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002428:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800242c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002430:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002438:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800243a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002446:	2001      	movs	r0, #1
 8002448:	f7fe fdb0 	bl	8000fac <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002454:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800245e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002468:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002474:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002478:	f64f 7341 	movw	r3, #65345	; 0xff41
 800247c:	4013      	ands	r3, r2
 800247e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002482:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002486:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002488:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800248c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800248e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002492:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002494:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002498:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800249a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800249e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80024a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80024a4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80024a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024b8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f7fe fd71 	bl	8000fac <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024d2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80024d4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80024d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f7fe fd5c 	bl	8000fac <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024fc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002506:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800250c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002510:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002522:	2304      	movs	r3, #4
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800252c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002532:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800253c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002542:	2300      	movs	r3, #0
 8002544:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002546:	2300      	movs	r3, #0
 8002548:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002552:	3318      	adds	r3, #24
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800255a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800255e:	4b3e      	ldr	r3, [pc, #248]	; (8002658 <ETH_MACDMAConfig+0x390>)
 8002560:	4013      	ands	r3, r2
 8002562:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002566:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002568:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800256a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800256c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800256e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002570:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002572:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002574:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002576:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002578:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800257a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800257c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800257e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002582:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002586:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002588:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800259a:	3318      	adds	r3, #24
 800259c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025a0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025aa:	3318      	adds	r3, #24
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7fe fcfa 	bl	8000fac <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c0:	3318      	adds	r3, #24
 80025c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025c6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80025c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80025cc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80025ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80025d0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80025d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80025d4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80025d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80025d8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80025da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025dc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80025de:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80025e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80025e2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002600:	2001      	movs	r0, #1
 8002602:	f7fe fcd3 	bl	8000fac <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800260e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002612:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d10f      	bne.n	800263c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002624:	331c      	adds	r3, #28
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002638:	331c      	adds	r3, #28
 800263a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	461a      	mov	r2, r3
 8002642:	2100      	movs	r1, #0
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f809 	bl	800265c <ETH_MACAddressConfig>
}
 800264a:	bf00      	nop
 800264c:	37c0      	adds	r7, #192	; 0xc0
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	ff20810f 	.word	0xff20810f
 8002658:	f8de3f23 	.word	0xf8de3f23

0800265c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3305      	adds	r3, #5
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	3204      	adds	r2, #4
 8002674:	7812      	ldrb	r2, [r2, #0]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <ETH_MACAddressConfig+0x68>)
 800267e:	4413      	add	r3, r2
 8002680:	461a      	mov	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3303      	adds	r3, #3
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	061a      	lsls	r2, r3, #24
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3302      	adds	r3, #2
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	041b      	lsls	r3, r3, #16
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3301      	adds	r3, #1
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	4313      	orrs	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	7812      	ldrb	r2, [r2, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <ETH_MACAddressConfig+0x6c>)
 80026ae:	4413      	add	r3, r2
 80026b0:	461a      	mov	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	6013      	str	r3, [r2, #0]
}
 80026b6:	bf00      	nop
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40028040 	.word	0x40028040
 80026c8:	40028044 	.word	0x40028044

080026cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	e177      	b.n	80029d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e8:	2201      	movs	r2, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	f040 8166 	bne.w	80029d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d005      	beq.n	800271e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271a:	2b02      	cmp	r3, #2
 800271c:	d130      	bne.n	8002780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002754:	2201      	movs	r2, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 0201 	and.w	r2, r3, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b03      	cmp	r3, #3
 800278a:	d017      	beq.n	80027bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d123      	bne.n	8002810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3208      	adds	r2, #8
 80027d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	220f      	movs	r2, #15
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	08da      	lsrs	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3208      	adds	r2, #8
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	2203      	movs	r2, #3
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0203 	and.w	r2, r3, #3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80c0 	beq.w	80029d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b66      	ldr	r3, [pc, #408]	; (80029f0 <HAL_GPIO_Init+0x324>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	4a65      	ldr	r2, [pc, #404]	; (80029f0 <HAL_GPIO_Init+0x324>)
 800285c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002860:	6453      	str	r3, [r2, #68]	; 0x44
 8002862:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <HAL_GPIO_Init+0x324>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800286e:	4a61      	ldr	r2, [pc, #388]	; (80029f4 <HAL_GPIO_Init+0x328>)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	220f      	movs	r2, #15
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a58      	ldr	r2, [pc, #352]	; (80029f8 <HAL_GPIO_Init+0x32c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d037      	beq.n	800290a <HAL_GPIO_Init+0x23e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a57      	ldr	r2, [pc, #348]	; (80029fc <HAL_GPIO_Init+0x330>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d031      	beq.n	8002906 <HAL_GPIO_Init+0x23a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a56      	ldr	r2, [pc, #344]	; (8002a00 <HAL_GPIO_Init+0x334>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d02b      	beq.n	8002902 <HAL_GPIO_Init+0x236>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a55      	ldr	r2, [pc, #340]	; (8002a04 <HAL_GPIO_Init+0x338>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d025      	beq.n	80028fe <HAL_GPIO_Init+0x232>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a54      	ldr	r2, [pc, #336]	; (8002a08 <HAL_GPIO_Init+0x33c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d01f      	beq.n	80028fa <HAL_GPIO_Init+0x22e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a53      	ldr	r2, [pc, #332]	; (8002a0c <HAL_GPIO_Init+0x340>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d019      	beq.n	80028f6 <HAL_GPIO_Init+0x22a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a52      	ldr	r2, [pc, #328]	; (8002a10 <HAL_GPIO_Init+0x344>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <HAL_GPIO_Init+0x226>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a51      	ldr	r2, [pc, #324]	; (8002a14 <HAL_GPIO_Init+0x348>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00d      	beq.n	80028ee <HAL_GPIO_Init+0x222>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a50      	ldr	r2, [pc, #320]	; (8002a18 <HAL_GPIO_Init+0x34c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d007      	beq.n	80028ea <HAL_GPIO_Init+0x21e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4f      	ldr	r2, [pc, #316]	; (8002a1c <HAL_GPIO_Init+0x350>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d101      	bne.n	80028e6 <HAL_GPIO_Init+0x21a>
 80028e2:	2309      	movs	r3, #9
 80028e4:	e012      	b.n	800290c <HAL_GPIO_Init+0x240>
 80028e6:	230a      	movs	r3, #10
 80028e8:	e010      	b.n	800290c <HAL_GPIO_Init+0x240>
 80028ea:	2308      	movs	r3, #8
 80028ec:	e00e      	b.n	800290c <HAL_GPIO_Init+0x240>
 80028ee:	2307      	movs	r3, #7
 80028f0:	e00c      	b.n	800290c <HAL_GPIO_Init+0x240>
 80028f2:	2306      	movs	r3, #6
 80028f4:	e00a      	b.n	800290c <HAL_GPIO_Init+0x240>
 80028f6:	2305      	movs	r3, #5
 80028f8:	e008      	b.n	800290c <HAL_GPIO_Init+0x240>
 80028fa:	2304      	movs	r3, #4
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x240>
 80028fe:	2303      	movs	r3, #3
 8002900:	e004      	b.n	800290c <HAL_GPIO_Init+0x240>
 8002902:	2302      	movs	r3, #2
 8002904:	e002      	b.n	800290c <HAL_GPIO_Init+0x240>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_GPIO_Init+0x240>
 800290a:	2300      	movs	r3, #0
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f002 0203 	and.w	r2, r2, #3
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	4093      	lsls	r3, r2
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800291c:	4935      	ldr	r1, [pc, #212]	; (80029f4 <HAL_GPIO_Init+0x328>)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800292a:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <HAL_GPIO_Init+0x354>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800294e:	4a34      	ldr	r2, [pc, #208]	; (8002a20 <HAL_GPIO_Init+0x354>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002954:	4b32      	ldr	r3, [pc, #200]	; (8002a20 <HAL_GPIO_Init+0x354>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002978:	4a29      	ldr	r2, [pc, #164]	; (8002a20 <HAL_GPIO_Init+0x354>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297e:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <HAL_GPIO_Init+0x354>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a2:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <HAL_GPIO_Init+0x354>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a8:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <HAL_GPIO_Init+0x354>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029cc:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <HAL_GPIO_Init+0x354>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3301      	adds	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b0f      	cmp	r3, #15
 80029dc:	f67f ae84 	bls.w	80026e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40013800 	.word	0x40013800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40020800 	.word	0x40020800
 8002a04:	40020c00 	.word	0x40020c00
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40021400 	.word	0x40021400
 8002a10:	40021800 	.word	0x40021800
 8002a14:	40021c00 	.word	0x40021c00
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40022400 	.word	0x40022400
 8002a20:	40013c00 	.word	0x40013c00

08002a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
 8002a30:	4613      	mov	r3, r2
 8002a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a34:	787b      	ldrb	r3, [r7, #1]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3a:	887a      	ldrh	r2, [r7, #2]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a40:	e003      	b.n	8002a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	041a      	lsls	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	619a      	str	r2, [r3, #24]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a58:	b08f      	sub	sp, #60	; 0x3c
 8002a5a:	af0a      	add	r7, sp, #40	; 0x28
 8002a5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e10f      	b.n	8002c88 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe f99c 	bl	8000dc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d102      	bne.n	8002aa2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f001 fc2f 	bl	800430a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	687e      	ldr	r6, [r7, #4]
 8002ab4:	466d      	mov	r5, sp
 8002ab6:	f106 0410 	add.w	r4, r6, #16
 8002aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ac6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aca:	1d33      	adds	r3, r6, #4
 8002acc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ace:	6838      	ldr	r0, [r7, #0]
 8002ad0:	f001 fbba 	bl	8004248 <USB_CoreInit>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0d0      	b.n	8002c88 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f001 fc1d 	bl	800432c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	73fb      	strb	r3, [r7, #15]
 8002af6:	e04a      	b.n	8002b8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	333d      	adds	r3, #61	; 0x3d
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	333c      	adds	r3, #60	; 0x3c
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	b298      	uxth	r0, r3
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	3342      	adds	r3, #66	; 0x42
 8002b34:	4602      	mov	r2, r0
 8002b36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	333f      	adds	r3, #63	; 0x3f
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	3344      	adds	r3, #68	; 0x44
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3348      	adds	r3, #72	; 0x48
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	3350      	adds	r3, #80	; 0x50
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
 8002b8e:	7bfa      	ldrb	r2, [r7, #15]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d3af      	bcc.n	8002af8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]
 8002b9c:	e044      	b.n	8002c28 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	3301      	adds	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d3b5      	bcc.n	8002b9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	687e      	ldr	r6, [r7, #4]
 8002c3a:	466d      	mov	r5, sp
 8002c3c:	f106 0410 	add.w	r4, r6, #16
 8002c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c50:	1d33      	adds	r3, r6, #4
 8002c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c54:	6838      	ldr	r0, [r7, #0]
 8002c56:	f001 fbb5 	bl	80043c4 <USB_DevInit>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e00d      	b.n	8002c88 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 fd60 	bl	8004746 <USB_DevDisconnect>

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e264      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d075      	beq.n	8002d9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cae:	4ba3      	ldr	r3, [pc, #652]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cba:	4ba0      	ldr	r3, [pc, #640]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d112      	bne.n	8002cec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc6:	4b9d      	ldr	r3, [pc, #628]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cd2:	d10b      	bne.n	8002cec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	4b99      	ldr	r3, [pc, #612]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d05b      	beq.n	8002d98 <HAL_RCC_OscConfig+0x108>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d157      	bne.n	8002d98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e23f      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf4:	d106      	bne.n	8002d04 <HAL_RCC_OscConfig+0x74>
 8002cf6:	4b91      	ldr	r3, [pc, #580]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a90      	ldr	r2, [pc, #576]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e01d      	b.n	8002d40 <HAL_RCC_OscConfig+0xb0>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x98>
 8002d0e:	4b8b      	ldr	r3, [pc, #556]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a8a      	ldr	r2, [pc, #552]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	4b88      	ldr	r3, [pc, #544]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a87      	ldr	r2, [pc, #540]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e00b      	b.n	8002d40 <HAL_RCC_OscConfig+0xb0>
 8002d28:	4b84      	ldr	r3, [pc, #528]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a83      	ldr	r2, [pc, #524]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	4b81      	ldr	r3, [pc, #516]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a80      	ldr	r2, [pc, #512]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d013      	beq.n	8002d70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe f924 	bl	8000f94 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe f920 	bl	8000f94 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e204      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	4b76      	ldr	r3, [pc, #472]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0xc0>
 8002d6e:	e014      	b.n	8002d9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fe f910 	bl	8000f94 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d78:	f7fe f90c 	bl	8000f94 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b64      	cmp	r3, #100	; 0x64
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e1f0      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8a:	4b6c      	ldr	r3, [pc, #432]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0xe8>
 8002d96:	e000      	b.n	8002d9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d063      	beq.n	8002e6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002da6:	4b65      	ldr	r3, [pc, #404]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00b      	beq.n	8002dca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002db2:	4b62      	ldr	r3, [pc, #392]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d11c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dbe:	4b5f      	ldr	r3, [pc, #380]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d116      	bne.n	8002df8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dca:	4b5c      	ldr	r3, [pc, #368]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <HAL_RCC_OscConfig+0x152>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d001      	beq.n	8002de2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e1c4      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de2:	4b56      	ldr	r3, [pc, #344]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4952      	ldr	r1, [pc, #328]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df6:	e03a      	b.n	8002e6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e00:	4b4f      	ldr	r3, [pc, #316]	; (8002f40 <HAL_RCC_OscConfig+0x2b0>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e06:	f7fe f8c5 	bl	8000f94 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e0e:	f7fe f8c1 	bl	8000f94 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e1a5      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e20:	4b46      	ldr	r3, [pc, #280]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2c:	4b43      	ldr	r3, [pc, #268]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4940      	ldr	r1, [pc, #256]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]
 8002e40:	e015      	b.n	8002e6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e42:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <HAL_RCC_OscConfig+0x2b0>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe f8a4 	bl	8000f94 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e50:	f7fe f8a0 	bl	8000f94 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e184      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d030      	beq.n	8002edc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d016      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e82:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <HAL_RCC_OscConfig+0x2b4>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe f884 	bl	8000f94 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e90:	f7fe f880 	bl	8000f94 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e164      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea2:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x200>
 8002eae:	e015      	b.n	8002edc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb0:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <HAL_RCC_OscConfig+0x2b4>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb6:	f7fe f86d 	bl	8000f94 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ebe:	f7fe f869 	bl	8000f94 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e14d      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f0      	bne.n	8002ebe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80a0 	beq.w	800302a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eea:	2300      	movs	r3, #0
 8002eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eee:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10f      	bne.n	8002f1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f08:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f16:	2301      	movs	r3, #1
 8002f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_OscConfig+0x2b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d121      	bne.n	8002f6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <HAL_RCC_OscConfig+0x2b8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <HAL_RCC_OscConfig+0x2b8>)
 8002f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f32:	f7fe f82f 	bl	8000f94 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	e011      	b.n	8002f5e <HAL_RCC_OscConfig+0x2ce>
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	42470000 	.word	0x42470000
 8002f44:	42470e80 	.word	0x42470e80
 8002f48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4c:	f7fe f822 	bl	8000f94 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e106      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5e:	4b85      	ldr	r3, [pc, #532]	; (8003174 <HAL_RCC_OscConfig+0x4e4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d106      	bne.n	8002f80 <HAL_RCC_OscConfig+0x2f0>
 8002f72:	4b81      	ldr	r3, [pc, #516]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a80      	ldr	r2, [pc, #512]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	e01c      	b.n	8002fba <HAL_RCC_OscConfig+0x32a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d10c      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x312>
 8002f88:	4b7b      	ldr	r3, [pc, #492]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	4a7a      	ldr	r2, [pc, #488]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8002f8e:	f043 0304 	orr.w	r3, r3, #4
 8002f92:	6713      	str	r3, [r2, #112]	; 0x70
 8002f94:	4b78      	ldr	r3, [pc, #480]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	4a77      	ldr	r2, [pc, #476]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa0:	e00b      	b.n	8002fba <HAL_RCC_OscConfig+0x32a>
 8002fa2:	4b75      	ldr	r3, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	4a74      	ldr	r2, [pc, #464]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	6713      	str	r3, [r2, #112]	; 0x70
 8002fae:	4b72      	ldr	r3, [pc, #456]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a71      	ldr	r2, [pc, #452]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8002fb4:	f023 0304 	bic.w	r3, r3, #4
 8002fb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d015      	beq.n	8002fee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc2:	f7fd ffe7 	bl	8000f94 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fd ffe3 	bl	8000f94 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0c5      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe0:	4b65      	ldr	r3, [pc, #404]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ee      	beq.n	8002fca <HAL_RCC_OscConfig+0x33a>
 8002fec:	e014      	b.n	8003018 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fee:	f7fd ffd1 	bl	8000f94 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7fd ffcd 	bl	8000f94 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	; 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0af      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300c:	4b5a      	ldr	r3, [pc, #360]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1ee      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d105      	bne.n	800302a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301e:	4b56      	ldr	r3, [pc, #344]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a55      	ldr	r2, [pc, #340]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8003024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 809b 	beq.w	800316a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003034:	4b50      	ldr	r3, [pc, #320]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b08      	cmp	r3, #8
 800303e:	d05c      	beq.n	80030fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d141      	bne.n	80030cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003048:	4b4c      	ldr	r3, [pc, #304]	; (800317c <HAL_RCC_OscConfig+0x4ec>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fd ffa1 	bl	8000f94 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003056:	f7fd ff9d 	bl	8000f94 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e081      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003068:	4b43      	ldr	r3, [pc, #268]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f0      	bne.n	8003056 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	019b      	lsls	r3, r3, #6
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	3b01      	subs	r3, #1
 800308e:	041b      	lsls	r3, r3, #16
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	061b      	lsls	r3, r3, #24
 8003098:	4937      	ldr	r1, [pc, #220]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 800309a:	4313      	orrs	r3, r2
 800309c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800309e:	4b37      	ldr	r3, [pc, #220]	; (800317c <HAL_RCC_OscConfig+0x4ec>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fd ff76 	bl	8000f94 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ac:	f7fd ff72 	bl	8000f94 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e056      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x41c>
 80030ca:	e04e      	b.n	800316a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <HAL_RCC_OscConfig+0x4ec>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7fd ff5f 	bl	8000f94 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030da:	f7fd ff5b 	bl	8000f94 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e03f      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ec:	4b22      	ldr	r3, [pc, #136]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f0      	bne.n	80030da <HAL_RCC_OscConfig+0x44a>
 80030f8:	e037      	b.n	800316a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e032      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003106:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <HAL_RCC_OscConfig+0x4e8>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d028      	beq.n	8003166 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d121      	bne.n	8003166 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312c:	429a      	cmp	r2, r3
 800312e:	d11a      	bne.n	8003166 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003136:	4013      	ands	r3, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800313c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800313e:	4293      	cmp	r3, r2
 8003140:	d111      	bne.n	8003166 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	3b01      	subs	r3, #1
 8003150:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003152:	429a      	cmp	r2, r3
 8003154:	d107      	bne.n	8003166 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40007000 	.word	0x40007000
 8003178:	40023800 	.word	0x40023800
 800317c:	42470060 	.word	0x42470060

08003180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0cc      	b.n	800332e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003194:	4b68      	ldr	r3, [pc, #416]	; (8003338 <HAL_RCC_ClockConfig+0x1b8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d90c      	bls.n	80031bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a2:	4b65      	ldr	r3, [pc, #404]	; (8003338 <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b63      	ldr	r3, [pc, #396]	; (8003338 <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0b8      	b.n	800332e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d020      	beq.n	800320a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d4:	4b59      	ldr	r3, [pc, #356]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	4a58      	ldr	r2, [pc, #352]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031ec:	4b53      	ldr	r3, [pc, #332]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4a52      	ldr	r2, [pc, #328]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f8:	4b50      	ldr	r3, [pc, #320]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	494d      	ldr	r1, [pc, #308]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d044      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d107      	bne.n	800322e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	4b47      	ldr	r3, [pc, #284]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d119      	bne.n	800325e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e07f      	b.n	800332e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d003      	beq.n	800323e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323a:	2b03      	cmp	r3, #3
 800323c:	d107      	bne.n	800324e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323e:	4b3f      	ldr	r3, [pc, #252]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e06f      	b.n	800332e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324e:	4b3b      	ldr	r3, [pc, #236]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e067      	b.n	800332e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325e:	4b37      	ldr	r3, [pc, #220]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f023 0203 	bic.w	r2, r3, #3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4934      	ldr	r1, [pc, #208]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	4313      	orrs	r3, r2
 800326e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003270:	f7fd fe90 	bl	8000f94 <HAL_GetTick>
 8003274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003276:	e00a      	b.n	800328e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003278:	f7fd fe8c 	bl	8000f94 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	; 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e04f      	b.n	800332e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	4b2b      	ldr	r3, [pc, #172]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 020c 	and.w	r2, r3, #12
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	429a      	cmp	r2, r3
 800329e:	d1eb      	bne.n	8003278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a0:	4b25      	ldr	r3, [pc, #148]	; (8003338 <HAL_RCC_ClockConfig+0x1b8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d20c      	bcs.n	80032c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b22      	ldr	r3, [pc, #136]	; (8003338 <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b20      	ldr	r3, [pc, #128]	; (8003338 <HAL_RCC_ClockConfig+0x1b8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e032      	b.n	800332e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d4:	4b19      	ldr	r3, [pc, #100]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4916      	ldr	r1, [pc, #88]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f2:	4b12      	ldr	r3, [pc, #72]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	490e      	ldr	r1, [pc, #56]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003306:	f000 f821 	bl	800334c <HAL_RCC_GetSysClockFreq>
 800330a:	4602      	mov	r2, r0
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	490a      	ldr	r1, [pc, #40]	; (8003340 <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	5ccb      	ldrb	r3, [r1, r3]
 800331a:	fa22 f303 	lsr.w	r3, r2, r3
 800331e:	4a09      	ldr	r2, [pc, #36]	; (8003344 <HAL_RCC_ClockConfig+0x1c4>)
 8003320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003322:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_RCC_ClockConfig+0x1c8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd fdf0 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40023c00 	.word	0x40023c00
 800333c:	40023800 	.word	0x40023800
 8003340:	08004878 	.word	0x08004878
 8003344:	20000004 	.word	0x20000004
 8003348:	20000008 	.word	0x20000008

0800334c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800334c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	2300      	movs	r3, #0
 800335e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003364:	4b67      	ldr	r3, [pc, #412]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 030c 	and.w	r3, r3, #12
 800336c:	2b08      	cmp	r3, #8
 800336e:	d00d      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x40>
 8003370:	2b08      	cmp	r3, #8
 8003372:	f200 80bd 	bhi.w	80034f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x34>
 800337a:	2b04      	cmp	r3, #4
 800337c:	d003      	beq.n	8003386 <HAL_RCC_GetSysClockFreq+0x3a>
 800337e:	e0b7      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003380:	4b61      	ldr	r3, [pc, #388]	; (8003508 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003382:	60bb      	str	r3, [r7, #8]
       break;
 8003384:	e0b7      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003386:	4b61      	ldr	r3, [pc, #388]	; (800350c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003388:	60bb      	str	r3, [r7, #8]
      break;
 800338a:	e0b4      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800338c:	4b5d      	ldr	r3, [pc, #372]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003394:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003396:	4b5b      	ldr	r3, [pc, #364]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d04d      	beq.n	800343e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a2:	4b58      	ldr	r3, [pc, #352]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	461a      	mov	r2, r3
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033b2:	f04f 0100 	mov.w	r1, #0
 80033b6:	ea02 0800 	and.w	r8, r2, r0
 80033ba:	ea03 0901 	and.w	r9, r3, r1
 80033be:	4640      	mov	r0, r8
 80033c0:	4649      	mov	r1, r9
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	014b      	lsls	r3, r1, #5
 80033cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033d0:	0142      	lsls	r2, r0, #5
 80033d2:	4610      	mov	r0, r2
 80033d4:	4619      	mov	r1, r3
 80033d6:	ebb0 0008 	subs.w	r0, r0, r8
 80033da:	eb61 0109 	sbc.w	r1, r1, r9
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	018b      	lsls	r3, r1, #6
 80033e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033ec:	0182      	lsls	r2, r0, #6
 80033ee:	1a12      	subs	r2, r2, r0
 80033f0:	eb63 0301 	sbc.w	r3, r3, r1
 80033f4:	f04f 0000 	mov.w	r0, #0
 80033f8:	f04f 0100 	mov.w	r1, #0
 80033fc:	00d9      	lsls	r1, r3, #3
 80033fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003402:	00d0      	lsls	r0, r2, #3
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	eb12 0208 	adds.w	r2, r2, r8
 800340c:	eb43 0309 	adc.w	r3, r3, r9
 8003410:	f04f 0000 	mov.w	r0, #0
 8003414:	f04f 0100 	mov.w	r1, #0
 8003418:	0259      	lsls	r1, r3, #9
 800341a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800341e:	0250      	lsls	r0, r2, #9
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	461a      	mov	r2, r3
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	f7fc fedc 	bl	80001ec <__aeabi_uldivmod>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4613      	mov	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	e04a      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343e:	4b31      	ldr	r3, [pc, #196]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	099b      	lsrs	r3, r3, #6
 8003444:	461a      	mov	r2, r3
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	ea02 0400 	and.w	r4, r2, r0
 8003456:	ea03 0501 	and.w	r5, r3, r1
 800345a:	4620      	mov	r0, r4
 800345c:	4629      	mov	r1, r5
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	014b      	lsls	r3, r1, #5
 8003468:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800346c:	0142      	lsls	r2, r0, #5
 800346e:	4610      	mov	r0, r2
 8003470:	4619      	mov	r1, r3
 8003472:	1b00      	subs	r0, r0, r4
 8003474:	eb61 0105 	sbc.w	r1, r1, r5
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	018b      	lsls	r3, r1, #6
 8003482:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003486:	0182      	lsls	r2, r0, #6
 8003488:	1a12      	subs	r2, r2, r0
 800348a:	eb63 0301 	sbc.w	r3, r3, r1
 800348e:	f04f 0000 	mov.w	r0, #0
 8003492:	f04f 0100 	mov.w	r1, #0
 8003496:	00d9      	lsls	r1, r3, #3
 8003498:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800349c:	00d0      	lsls	r0, r2, #3
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	1912      	adds	r2, r2, r4
 80034a4:	eb45 0303 	adc.w	r3, r5, r3
 80034a8:	f04f 0000 	mov.w	r0, #0
 80034ac:	f04f 0100 	mov.w	r1, #0
 80034b0:	0299      	lsls	r1, r3, #10
 80034b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034b6:	0290      	lsls	r0, r2, #10
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4610      	mov	r0, r2
 80034be:	4619      	mov	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	461a      	mov	r2, r3
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	f7fc fe90 	bl	80001ec <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4613      	mov	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	0c1b      	lsrs	r3, r3, #16
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	3301      	adds	r3, #1
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	60bb      	str	r3, [r7, #8]
      break;
 80034ee:	e002      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034f2:	60bb      	str	r3, [r7, #8]
      break;
 80034f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034f6:	68bb      	ldr	r3, [r7, #8]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	00f42400 	.word	0x00f42400
 800350c:	007a1200 	.word	0x007a1200

08003510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <HAL_RCC_GetHCLKFreq+0x14>)
 8003516:	681b      	ldr	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000004 	.word	0x20000004

08003528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800352c:	f7ff fff0 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	0a9b      	lsrs	r3, r3, #10
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4903      	ldr	r1, [pc, #12]	; (800354c <HAL_RCC_GetPCLK1Freq+0x24>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003544:	4618      	mov	r0, r3
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40023800 	.word	0x40023800
 800354c:	08004888 	.word	0x08004888

08003550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003554:	f7ff ffdc 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8003558:	4602      	mov	r2, r0
 800355a:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	0b5b      	lsrs	r3, r3, #13
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	4903      	ldr	r1, [pc, #12]	; (8003574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003566:	5ccb      	ldrb	r3, [r1, r3]
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40023800 	.word	0x40023800
 8003574:	08004888 	.word	0x08004888

08003578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e03f      	b.n	800360a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd fb5c 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2224      	movs	r2, #36	; 0x24
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fc7b 	bl	8003eb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b0ba      	sub	sp, #232	; 0xe8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800363a:	2300      	movs	r3, #0
 800363c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003640:	2300      	movs	r3, #0
 8003642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800365a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_UART_IRQHandler+0x66>
 8003666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fb65 	bl	8003d42 <UART_Receive_IT>
      return;
 8003678:	e256      	b.n	8003b28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800367a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80de 	beq.w	8003840 <HAL_UART_IRQHandler+0x22c>
 8003684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d106      	bne.n	800369e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003694:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80d1 	beq.w	8003840 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800369e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <HAL_UART_IRQHandler+0xae>
 80036aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_UART_IRQHandler+0xd2>
 80036ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f043 0202 	orr.w	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_UART_IRQHandler+0xf6>
 80036f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f043 0204 	orr.w	r2, r3, #4
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800370a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d011      	beq.n	800373a <HAL_UART_IRQHandler+0x126>
 8003716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d105      	bne.n	800372e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f043 0208 	orr.w	r2, r3, #8
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 81ed 	beq.w	8003b1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_UART_IRQHandler+0x14e>
 8003750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 faf0 	bl	8003d42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <HAL_UART_IRQHandler+0x17a>
 8003786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800378a:	2b00      	cmp	r3, #0
 800378c:	d04f      	beq.n	800382e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f9f8 	bl	8003b84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379e:	2b40      	cmp	r3, #64	; 0x40
 80037a0:	d141      	bne.n	8003826 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3314      	adds	r3, #20
 80037a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3314      	adds	r3, #20
 80037ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1d9      	bne.n	80037a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d013      	beq.n	800381e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	4a7d      	ldr	r2, [pc, #500]	; (80039f0 <HAL_UART_IRQHandler+0x3dc>)
 80037fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe f898 	bl	8001938 <HAL_DMA_Abort_IT>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d016      	beq.n	800383c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003818:	4610      	mov	r0, r2
 800381a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	e00e      	b.n	800383c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f99a 	bl	8003b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003824:	e00a      	b.n	800383c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f996 	bl	8003b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382c:	e006      	b.n	800383c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f992 	bl	8003b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800383a:	e170      	b.n	8003b1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800383c:	bf00      	nop
    return;
 800383e:	e16e      	b.n	8003b1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	2b01      	cmp	r3, #1
 8003846:	f040 814a 	bne.w	8003ade <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384e:	f003 0310 	and.w	r3, r3, #16
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8143 	beq.w	8003ade <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 813c 	beq.w	8003ade <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	f040 80b4 	bne.w	80039f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003898:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8140 	beq.w	8003b22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038aa:	429a      	cmp	r2, r3
 80038ac:	f080 8139 	bcs.w	8003b22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c2:	f000 8088 	beq.w	80039d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	330c      	adds	r3, #12
 80038cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	330c      	adds	r3, #12
 80038ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800390a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1d9      	bne.n	80038c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3314      	adds	r3, #20
 8003918:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3314      	adds	r3, #20
 8003932:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003936:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800393a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800393e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1e1      	bne.n	8003912 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3314      	adds	r3, #20
 8003954:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800395e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3314      	adds	r3, #20
 800396e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003972:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003974:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003978:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e3      	bne.n	800394e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a6:	f023 0310 	bic.w	r3, r3, #16
 80039aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80039ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e3      	bne.n	8003994 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fd ff41 	bl	8001858 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039de:	b29b      	uxth	r3, r3
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	4619      	mov	r1, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f8c0 	bl	8003b6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039ec:	e099      	b.n	8003b22 <HAL_UART_IRQHandler+0x50e>
 80039ee:	bf00      	nop
 80039f0:	08003c4b 	.word	0x08003c4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 808b 	beq.w	8003b26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 8086 	beq.w	8003b26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	330c      	adds	r3, #12
 8003a20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	330c      	adds	r3, #12
 8003a3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a3e:	647a      	str	r2, [r7, #68]	; 0x44
 8003a40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e3      	bne.n	8003a1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3314      	adds	r3, #20
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	623b      	str	r3, [r7, #32]
   return(result);
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3314      	adds	r3, #20
 8003a72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a76:	633a      	str	r2, [r7, #48]	; 0x30
 8003a78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e3      	bne.n	8003a52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0310 	bic.w	r3, r3, #16
 8003aae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	330c      	adds	r3, #12
 8003ab8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003abc:	61fa      	str	r2, [r7, #28]
 8003abe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	69b9      	ldr	r1, [r7, #24]
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	617b      	str	r3, [r7, #20]
   return(result);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e3      	bne.n	8003a98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ad0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f848 	bl	8003b6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003adc:	e023      	b.n	8003b26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_UART_IRQHandler+0x4ea>
 8003aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f8bb 	bl	8003c72 <UART_Transmit_IT>
    return;
 8003afc:	e014      	b.n	8003b28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00e      	beq.n	8003b28 <HAL_UART_IRQHandler+0x514>
 8003b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f8fb 	bl	8003d12 <UART_EndTransmit_IT>
    return;
 8003b1c:	e004      	b.n	8003b28 <HAL_UART_IRQHandler+0x514>
    return;
 8003b1e:	bf00      	nop
 8003b20:	e002      	b.n	8003b28 <HAL_UART_IRQHandler+0x514>
      return;
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <HAL_UART_IRQHandler+0x514>
      return;
 8003b26:	bf00      	nop
  }
}
 8003b28:	37e8      	adds	r7, #232	; 0xe8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop

08003b30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b095      	sub	sp, #84	; 0x54
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	330c      	adds	r3, #12
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bac:	643a      	str	r2, [r7, #64]	; 0x40
 8003bae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bb4:	e841 2300 	strex	r3, r2, [r1]
 8003bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e5      	bne.n	8003b8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3314      	adds	r3, #20
 8003bc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3314      	adds	r3, #20
 8003bde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003be0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e5      	bne.n	8003bc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d119      	bne.n	8003c30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f023 0310 	bic.w	r3, r3, #16
 8003c12:	647b      	str	r3, [r7, #68]	; 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c1c:	61ba      	str	r2, [r7, #24]
 8003c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	6979      	ldr	r1, [r7, #20]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	e841 2300 	strex	r3, r2, [r1]
 8003c28:	613b      	str	r3, [r7, #16]
   return(result);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e5      	bne.n	8003bfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c3e:	bf00      	nop
 8003c40:	3754      	adds	r7, #84	; 0x54
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7ff ff77 	bl	8003b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b085      	sub	sp, #20
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b21      	cmp	r3, #33	; 0x21
 8003c84:	d13e      	bne.n	8003d04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8e:	d114      	bne.n	8003cba <UART_Transmit_IT+0x48>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d110      	bne.n	8003cba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	1c9a      	adds	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	621a      	str	r2, [r3, #32]
 8003cb8:	e008      	b.n	8003ccc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	1c59      	adds	r1, r3, #1
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6211      	str	r1, [r2, #32]
 8003cc4:	781a      	ldrb	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10f      	bne.n	8003d00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fefc 	bl	8003b30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b08c      	sub	sp, #48	; 0x30
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b22      	cmp	r3, #34	; 0x22
 8003d54:	f040 80ab 	bne.w	8003eae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d60:	d117      	bne.n	8003d92 <UART_Receive_IT+0x50>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d113      	bne.n	8003d92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	1c9a      	adds	r2, r3, #2
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d90:	e026      	b.n	8003de0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da4:	d007      	beq.n	8003db6 <UART_Receive_IT+0x74>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10a      	bne.n	8003dc4 <UART_Receive_IT+0x82>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	e008      	b.n	8003dd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4619      	mov	r1, r3
 8003dee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d15a      	bne.n	8003eaa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0220 	bic.w	r2, r2, #32
 8003e02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0201 	bic.w	r2, r2, #1
 8003e22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d135      	bne.n	8003ea0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	330c      	adds	r3, #12
 8003e40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	613b      	str	r3, [r7, #16]
   return(result);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f023 0310 	bic.w	r3, r3, #16
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5a:	623a      	str	r2, [r7, #32]
 8003e5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	69f9      	ldr	r1, [r7, #28]
 8003e60:	6a3a      	ldr	r2, [r7, #32]
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e5      	bne.n	8003e3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b10      	cmp	r3, #16
 8003e7a:	d10a      	bne.n	8003e92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e96:	4619      	mov	r1, r3
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff fe67 	bl	8003b6c <HAL_UARTEx_RxEventCallback>
 8003e9e:	e002      	b.n	8003ea6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff fe4f 	bl	8003b44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	e002      	b.n	8003eb0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e000      	b.n	8003eb0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003eae:	2302      	movs	r3, #2
  }
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3730      	adds	r7, #48	; 0x30
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ebc:	b09f      	sub	sp, #124	; 0x7c
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ece:	68d9      	ldr	r1, [r3, #12]
 8003ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	ea40 0301 	orr.w	r3, r0, r1
 8003ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003efc:	f021 010c 	bic.w	r1, r1, #12
 8003f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f06:	430b      	orrs	r3, r1
 8003f08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f16:	6999      	ldr	r1, [r3, #24]
 8003f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	ea40 0301 	orr.w	r3, r0, r1
 8003f20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4bc5      	ldr	r3, [pc, #788]	; (800423c <UART_SetConfig+0x384>)
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d004      	beq.n	8003f36 <UART_SetConfig+0x7e>
 8003f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	4bc3      	ldr	r3, [pc, #780]	; (8004240 <UART_SetConfig+0x388>)
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d103      	bne.n	8003f3e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f36:	f7ff fb0b 	bl	8003550 <HAL_RCC_GetPCLK2Freq>
 8003f3a:	6778      	str	r0, [r7, #116]	; 0x74
 8003f3c:	e002      	b.n	8003f44 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f3e:	f7ff faf3 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 8003f42:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f4c:	f040 80b6 	bne.w	80040bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f52:	461c      	mov	r4, r3
 8003f54:	f04f 0500 	mov.w	r5, #0
 8003f58:	4622      	mov	r2, r4
 8003f5a:	462b      	mov	r3, r5
 8003f5c:	1891      	adds	r1, r2, r2
 8003f5e:	6439      	str	r1, [r7, #64]	; 0x40
 8003f60:	415b      	adcs	r3, r3
 8003f62:	647b      	str	r3, [r7, #68]	; 0x44
 8003f64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f68:	1912      	adds	r2, r2, r4
 8003f6a:	eb45 0303 	adc.w	r3, r5, r3
 8003f6e:	f04f 0000 	mov.w	r0, #0
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	00d9      	lsls	r1, r3, #3
 8003f78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f7c:	00d0      	lsls	r0, r2, #3
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	1911      	adds	r1, r2, r4
 8003f84:	6639      	str	r1, [r7, #96]	; 0x60
 8003f86:	416b      	adcs	r3, r5
 8003f88:	667b      	str	r3, [r7, #100]	; 0x64
 8003f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	1891      	adds	r1, r2, r2
 8003f96:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f98:	415b      	adcs	r3, r3
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fa0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003fa4:	f7fc f922 	bl	80001ec <__aeabi_uldivmod>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4ba5      	ldr	r3, [pc, #660]	; (8004244 <UART_SetConfig+0x38c>)
 8003fae:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	011e      	lsls	r6, r3, #4
 8003fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb8:	461c      	mov	r4, r3
 8003fba:	f04f 0500 	mov.w	r5, #0
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	462b      	mov	r3, r5
 8003fc2:	1891      	adds	r1, r2, r2
 8003fc4:	6339      	str	r1, [r7, #48]	; 0x30
 8003fc6:	415b      	adcs	r3, r3
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003fce:	1912      	adds	r2, r2, r4
 8003fd0:	eb45 0303 	adc.w	r3, r5, r3
 8003fd4:	f04f 0000 	mov.w	r0, #0
 8003fd8:	f04f 0100 	mov.w	r1, #0
 8003fdc:	00d9      	lsls	r1, r3, #3
 8003fde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fe2:	00d0      	lsls	r0, r2, #3
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	1911      	adds	r1, r2, r4
 8003fea:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fec:	416b      	adcs	r3, r5
 8003fee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	1891      	adds	r1, r2, r2
 8003ffc:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ffe:	415b      	adcs	r3, r3
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004002:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004006:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800400a:	f7fc f8ef 	bl	80001ec <__aeabi_uldivmod>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4b8c      	ldr	r3, [pc, #560]	; (8004244 <UART_SetConfig+0x38c>)
 8004014:	fba3 1302 	umull	r1, r3, r3, r2
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	2164      	movs	r1, #100	; 0x64
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	3332      	adds	r3, #50	; 0x32
 8004026:	4a87      	ldr	r2, [pc, #540]	; (8004244 <UART_SetConfig+0x38c>)
 8004028:	fba2 2303 	umull	r2, r3, r2, r3
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004034:	441e      	add	r6, r3
 8004036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004038:	4618      	mov	r0, r3
 800403a:	f04f 0100 	mov.w	r1, #0
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	1894      	adds	r4, r2, r2
 8004044:	623c      	str	r4, [r7, #32]
 8004046:	415b      	adcs	r3, r3
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
 800404a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800404e:	1812      	adds	r2, r2, r0
 8004050:	eb41 0303 	adc.w	r3, r1, r3
 8004054:	f04f 0400 	mov.w	r4, #0
 8004058:	f04f 0500 	mov.w	r5, #0
 800405c:	00dd      	lsls	r5, r3, #3
 800405e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004062:	00d4      	lsls	r4, r2, #3
 8004064:	4622      	mov	r2, r4
 8004066:	462b      	mov	r3, r5
 8004068:	1814      	adds	r4, r2, r0
 800406a:	653c      	str	r4, [r7, #80]	; 0x50
 800406c:	414b      	adcs	r3, r1
 800406e:	657b      	str	r3, [r7, #84]	; 0x54
 8004070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	461a      	mov	r2, r3
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	1891      	adds	r1, r2, r2
 800407c:	61b9      	str	r1, [r7, #24]
 800407e:	415b      	adcs	r3, r3
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004086:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800408a:	f7fc f8af 	bl	80001ec <__aeabi_uldivmod>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4b6c      	ldr	r3, [pc, #432]	; (8004244 <UART_SetConfig+0x38c>)
 8004094:	fba3 1302 	umull	r1, r3, r3, r2
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	2164      	movs	r1, #100	; 0x64
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	3332      	adds	r3, #50	; 0x32
 80040a6:	4a67      	ldr	r2, [pc, #412]	; (8004244 <UART_SetConfig+0x38c>)
 80040a8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	f003 0207 	and.w	r2, r3, #7
 80040b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4432      	add	r2, r6
 80040b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040ba:	e0b9      	b.n	8004230 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040be:	461c      	mov	r4, r3
 80040c0:	f04f 0500 	mov.w	r5, #0
 80040c4:	4622      	mov	r2, r4
 80040c6:	462b      	mov	r3, r5
 80040c8:	1891      	adds	r1, r2, r2
 80040ca:	6139      	str	r1, [r7, #16]
 80040cc:	415b      	adcs	r3, r3
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040d4:	1912      	adds	r2, r2, r4
 80040d6:	eb45 0303 	adc.w	r3, r5, r3
 80040da:	f04f 0000 	mov.w	r0, #0
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	00d9      	lsls	r1, r3, #3
 80040e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040e8:	00d0      	lsls	r0, r2, #3
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	eb12 0804 	adds.w	r8, r2, r4
 80040f2:	eb43 0905 	adc.w	r9, r3, r5
 80040f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	008b      	lsls	r3, r1, #2
 800410a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800410e:	0082      	lsls	r2, r0, #2
 8004110:	4640      	mov	r0, r8
 8004112:	4649      	mov	r1, r9
 8004114:	f7fc f86a 	bl	80001ec <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4b49      	ldr	r3, [pc, #292]	; (8004244 <UART_SetConfig+0x38c>)
 800411e:	fba3 2302 	umull	r2, r3, r3, r2
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	011e      	lsls	r6, r3, #4
 8004126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004128:	4618      	mov	r0, r3
 800412a:	f04f 0100 	mov.w	r1, #0
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	1894      	adds	r4, r2, r2
 8004134:	60bc      	str	r4, [r7, #8]
 8004136:	415b      	adcs	r3, r3
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800413e:	1812      	adds	r2, r2, r0
 8004140:	eb41 0303 	adc.w	r3, r1, r3
 8004144:	f04f 0400 	mov.w	r4, #0
 8004148:	f04f 0500 	mov.w	r5, #0
 800414c:	00dd      	lsls	r5, r3, #3
 800414e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004152:	00d4      	lsls	r4, r2, #3
 8004154:	4622      	mov	r2, r4
 8004156:	462b      	mov	r3, r5
 8004158:	1814      	adds	r4, r2, r0
 800415a:	64bc      	str	r4, [r7, #72]	; 0x48
 800415c:	414b      	adcs	r3, r1
 800415e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4618      	mov	r0, r3
 8004166:	f04f 0100 	mov.w	r1, #0
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	008b      	lsls	r3, r1, #2
 8004174:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004178:	0082      	lsls	r2, r0, #2
 800417a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800417e:	f7fc f835 	bl	80001ec <__aeabi_uldivmod>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4b2f      	ldr	r3, [pc, #188]	; (8004244 <UART_SetConfig+0x38c>)
 8004188:	fba3 1302 	umull	r1, r3, r3, r2
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	2164      	movs	r1, #100	; 0x64
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	3332      	adds	r3, #50	; 0x32
 800419a:	4a2a      	ldr	r2, [pc, #168]	; (8004244 <UART_SetConfig+0x38c>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a6:	441e      	add	r6, r3
 80041a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041aa:	4618      	mov	r0, r3
 80041ac:	f04f 0100 	mov.w	r1, #0
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	1894      	adds	r4, r2, r2
 80041b6:	603c      	str	r4, [r7, #0]
 80041b8:	415b      	adcs	r3, r3
 80041ba:	607b      	str	r3, [r7, #4]
 80041bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041c0:	1812      	adds	r2, r2, r0
 80041c2:	eb41 0303 	adc.w	r3, r1, r3
 80041c6:	f04f 0400 	mov.w	r4, #0
 80041ca:	f04f 0500 	mov.w	r5, #0
 80041ce:	00dd      	lsls	r5, r3, #3
 80041d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041d4:	00d4      	lsls	r4, r2, #3
 80041d6:	4622      	mov	r2, r4
 80041d8:	462b      	mov	r3, r5
 80041da:	eb12 0a00 	adds.w	sl, r2, r0
 80041de:	eb43 0b01 	adc.w	fp, r3, r1
 80041e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f04f 0100 	mov.w	r1, #0
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	008b      	lsls	r3, r1, #2
 80041f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041fa:	0082      	lsls	r2, r0, #2
 80041fc:	4650      	mov	r0, sl
 80041fe:	4659      	mov	r1, fp
 8004200:	f7fb fff4 	bl	80001ec <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <UART_SetConfig+0x38c>)
 800420a:	fba3 1302 	umull	r1, r3, r3, r2
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2164      	movs	r1, #100	; 0x64
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	3332      	adds	r3, #50	; 0x32
 800421c:	4a09      	ldr	r2, [pc, #36]	; (8004244 <UART_SetConfig+0x38c>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	f003 020f 	and.w	r2, r3, #15
 8004228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4432      	add	r2, r6
 800422e:	609a      	str	r2, [r3, #8]
}
 8004230:	bf00      	nop
 8004232:	377c      	adds	r7, #124	; 0x7c
 8004234:	46bd      	mov	sp, r7
 8004236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800423a:	bf00      	nop
 800423c:	40011000 	.word	0x40011000
 8004240:	40011400 	.word	0x40011400
 8004244:	51eb851f 	.word	0x51eb851f

08004248 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004248:	b084      	sub	sp, #16
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	f107 001c 	add.w	r0, r7, #28
 8004256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	2b01      	cmp	r3, #1
 800425e:	d122      	bne.n	80042a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428a:	2b01      	cmp	r3, #1
 800428c:	d105      	bne.n	800429a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fa82 	bl	80047a4 <USB_CoreReset>
 80042a0:	4603      	mov	r3, r0
 80042a2:	73fb      	strb	r3, [r7, #15]
 80042a4:	e01a      	b.n	80042dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fa76 	bl	80047a4 <USB_CoreReset>
 80042b8:	4603      	mov	r3, r0
 80042ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	639a      	str	r2, [r3, #56]	; 0x38
 80042ce:	e005      	b.n	80042dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d10b      	bne.n	80042fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f043 0206 	orr.w	r2, r3, #6
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f043 0220 	orr.w	r2, r3, #32
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004306:	b004      	add	sp, #16
 8004308:	4770      	bx	lr

0800430a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f023 0201 	bic.w	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d115      	bne.n	800437a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800435a:	2001      	movs	r0, #1
 800435c:	f7fc fe26 	bl	8000fac <HAL_Delay>
      ms++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3301      	adds	r3, #1
 8004364:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fa0e 	bl	8004788 <USB_GetMode>
 800436c:	4603      	mov	r3, r0
 800436e:	2b01      	cmp	r3, #1
 8004370:	d01e      	beq.n	80043b0 <USB_SetCurrentMode+0x84>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b31      	cmp	r3, #49	; 0x31
 8004376:	d9f0      	bls.n	800435a <USB_SetCurrentMode+0x2e>
 8004378:	e01a      	b.n	80043b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d115      	bne.n	80043ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800438c:	2001      	movs	r0, #1
 800438e:	f7fc fe0d 	bl	8000fac <HAL_Delay>
      ms++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3301      	adds	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f9f5 	bl	8004788 <USB_GetMode>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <USB_SetCurrentMode+0x84>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b31      	cmp	r3, #49	; 0x31
 80043a8:	d9f0      	bls.n	800438c <USB_SetCurrentMode+0x60>
 80043aa:	e001      	b.n	80043b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e005      	b.n	80043bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b32      	cmp	r3, #50	; 0x32
 80043b4:	d101      	bne.n	80043ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043c4:	b084      	sub	sp, #16
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b086      	sub	sp, #24
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	e009      	b.n	80043f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	3340      	adds	r3, #64	; 0x40
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	2200      	movs	r2, #0
 80043f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	3301      	adds	r3, #1
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b0e      	cmp	r3, #14
 80043fc:	d9f2      	bls.n	80043e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d11c      	bne.n	800443e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004412:	f043 0302 	orr.w	r3, r3, #2
 8004416:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
 800443c:	e00b      	b.n	8004456 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800445c:	461a      	mov	r2, r3
 800445e:	2300      	movs	r3, #0
 8004460:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004468:	4619      	mov	r1, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004470:	461a      	mov	r2, r3
 8004472:	680b      	ldr	r3, [r1, #0]
 8004474:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004478:	2b01      	cmp	r3, #1
 800447a:	d10c      	bne.n	8004496 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447e:	2b00      	cmp	r3, #0
 8004480:	d104      	bne.n	800448c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004482:	2100      	movs	r1, #0
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f945 	bl	8004714 <USB_SetDevSpeed>
 800448a:	e008      	b.n	800449e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800448c:	2101      	movs	r1, #1
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f940 	bl	8004714 <USB_SetDevSpeed>
 8004494:	e003      	b.n	800449e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004496:	2103      	movs	r1, #3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f93b 	bl	8004714 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800449e:	2110      	movs	r1, #16
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f8f3 	bl	800468c <USB_FlushTxFifo>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f90f 	bl	80046d4 <USB_FlushRxFifo>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c6:	461a      	mov	r2, r3
 80044c8:	2300      	movs	r3, #0
 80044ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d2:	461a      	mov	r2, r3
 80044d4:	2300      	movs	r3, #0
 80044d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044de:	461a      	mov	r2, r3
 80044e0:	2300      	movs	r3, #0
 80044e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	e043      	b.n	8004572 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004500:	d118      	bne.n	8004534 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004514:	461a      	mov	r2, r3
 8004516:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e013      	b.n	8004546 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452a:	461a      	mov	r2, r3
 800452c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e008      	b.n	8004546 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004540:	461a      	mov	r2, r3
 8004542:	2300      	movs	r3, #0
 8004544:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004552:	461a      	mov	r2, r3
 8004554:	2300      	movs	r3, #0
 8004556:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004564:	461a      	mov	r2, r3
 8004566:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800456a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	3301      	adds	r3, #1
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	429a      	cmp	r2, r3
 8004578:	d3b7      	bcc.n	80044ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800457a:	2300      	movs	r3, #0
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	e043      	b.n	8004608 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004596:	d118      	bne.n	80045ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045aa:	461a      	mov	r2, r3
 80045ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	e013      	b.n	80045dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c0:	461a      	mov	r2, r3
 80045c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	e008      	b.n	80045dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d6:	461a      	mov	r2, r3
 80045d8:	2300      	movs	r3, #0
 80045da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e8:	461a      	mov	r2, r3
 80045ea:	2300      	movs	r3, #0
 80045ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fa:	461a      	mov	r2, r3
 80045fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004600:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	3301      	adds	r3, #1
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	429a      	cmp	r2, r3
 800460e:	d3b7      	bcc.n	8004580 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800461e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004622:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004630:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	2b00      	cmp	r3, #0
 8004636:	d105      	bne.n	8004644 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f043 0210 	orr.w	r2, r3, #16
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699a      	ldr	r2, [r3, #24]
 8004648:	4b0f      	ldr	r3, [pc, #60]	; (8004688 <USB_DevInit+0x2c4>)
 800464a:	4313      	orrs	r3, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f043 0208 	orr.w	r2, r3, #8
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004664:	2b01      	cmp	r3, #1
 8004666:	d107      	bne.n	8004678 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004670:	f043 0304 	orr.w	r3, r3, #4
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004678:	7dfb      	ldrb	r3, [r7, #23]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004684:	b004      	add	sp, #16
 8004686:	4770      	bx	lr
 8004688:	803c3800 	.word	0x803c3800

0800468c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	019b      	lsls	r3, r3, #6
 800469e:	f043 0220 	orr.w	r2, r3, #32
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3301      	adds	r3, #1
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	4a08      	ldr	r2, [pc, #32]	; (80046d0 <USB_FlushTxFifo+0x44>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e006      	b.n	80046c4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d0f1      	beq.n	80046a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	00030d40 	.word	0x00030d40

080046d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2210      	movs	r2, #16
 80046e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3301      	adds	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	4a08      	ldr	r2, [pc, #32]	; (8004710 <USB_FlushRxFifo+0x3c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e006      	b.n	8004704 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d0f1      	beq.n	80046e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	00030d40 	.word	0x00030d40

08004714 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	68f9      	ldr	r1, [r7, #12]
 8004730:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004734:	4313      	orrs	r3, r2
 8004736:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004760:	f023 0303 	bic.w	r3, r3, #3
 8004764:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004774:	f043 0302 	orr.w	r3, r3, #2
 8004778:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f003 0301 	and.w	r3, r3, #1
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3301      	adds	r3, #1
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	4a13      	ldr	r2, [pc, #76]	; (8004804 <USB_CoreReset+0x60>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e01a      	b.n	80047f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	daf3      	bge.n	80047b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f043 0201 	orr.w	r2, r3, #1
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	4a09      	ldr	r2, [pc, #36]	; (8004804 <USB_CoreReset+0x60>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e006      	b.n	80047f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d0f1      	beq.n	80047d8 <USB_CoreReset+0x34>

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	00030d40 	.word	0x00030d40

08004808 <__libc_init_array>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4d0d      	ldr	r5, [pc, #52]	; (8004840 <__libc_init_array+0x38>)
 800480c:	4c0d      	ldr	r4, [pc, #52]	; (8004844 <__libc_init_array+0x3c>)
 800480e:	1b64      	subs	r4, r4, r5
 8004810:	10a4      	asrs	r4, r4, #2
 8004812:	2600      	movs	r6, #0
 8004814:	42a6      	cmp	r6, r4
 8004816:	d109      	bne.n	800482c <__libc_init_array+0x24>
 8004818:	4d0b      	ldr	r5, [pc, #44]	; (8004848 <__libc_init_array+0x40>)
 800481a:	4c0c      	ldr	r4, [pc, #48]	; (800484c <__libc_init_array+0x44>)
 800481c:	f000 f820 	bl	8004860 <_init>
 8004820:	1b64      	subs	r4, r4, r5
 8004822:	10a4      	asrs	r4, r4, #2
 8004824:	2600      	movs	r6, #0
 8004826:	42a6      	cmp	r6, r4
 8004828:	d105      	bne.n	8004836 <__libc_init_array+0x2e>
 800482a:	bd70      	pop	{r4, r5, r6, pc}
 800482c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004830:	4798      	blx	r3
 8004832:	3601      	adds	r6, #1
 8004834:	e7ee      	b.n	8004814 <__libc_init_array+0xc>
 8004836:	f855 3b04 	ldr.w	r3, [r5], #4
 800483a:	4798      	blx	r3
 800483c:	3601      	adds	r6, #1
 800483e:	e7f2      	b.n	8004826 <__libc_init_array+0x1e>
 8004840:	080048a0 	.word	0x080048a0
 8004844:	080048a0 	.word	0x080048a0
 8004848:	080048a0 	.word	0x080048a0
 800484c:	080048a4 	.word	0x080048a4

08004850 <memset>:
 8004850:	4402      	add	r2, r0
 8004852:	4603      	mov	r3, r0
 8004854:	4293      	cmp	r3, r2
 8004856:	d100      	bne.n	800485a <memset+0xa>
 8004858:	4770      	bx	lr
 800485a:	f803 1b01 	strb.w	r1, [r3], #1
 800485e:	e7f9      	b.n	8004854 <memset+0x4>

08004860 <_init>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr

0800486c <_fini>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr
